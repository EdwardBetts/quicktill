#!/usr/bin/env python3

# A very basic "debug" keyboard: show the keyboard layout in a window
# on-screen and forward keypresses to quicktill

# This script is intended to be started by the runtill "start"
# subcommand when run with option --debug-kbd --- the keyboard layout
# will be passed to us over a fd.  The script exits when the window is
# closed or when it receives EOF on stdin.

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Pango, GLib

import os
import sys
import json
import argparse

_rowletters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"]

font = Pango.FontDescription("sans 8")

class KButton:
    def __init__(self, code, label, width=1, height=1):
        self.code = code
        self.label = label
        self.width = width
        self.height = height

    def as_button(self, callback):
        lw = Gtk.Label(self.label, justify=Gtk.Justification.CENTER)
        lw.set_line_wrap(True)
        lw.modify_font(font)
        button = Gtk.Button()
        button.add(lw)
        button.connect("clicked", lambda widget: callback(self.code))
        return button

class KBWindow(Gtk.Window):
    def __init__(self, grid):
        super(KBWindow, self).__init__(title="quicktill debug keyboard")
        self.add(grid)

class KBDescription:
    def __init__(self, keyboard):
        self.keys = {} # KButton indexed by (row, col)
        # Assume locs are of the form 'A01' to 'H20'; bottom-left will be
        # first and top-right will be last
        locs = sorted(keyboard.keys())
        height = _rowletters.index(locs[-1][0])

        for loc in locs:
            # Bottom up, left to right
            label = keyboard[loc]
            row = height - _rowletters.index(loc[0])
            col = int(loc[1:]) - 1
            self.keys[(row, col)] = KButton(loc, label)

        # Look for wide and tall buttons - max width and/or height is 2
        dl = []
        for loc in sorted(self.keys.keys()):
            if loc in dl:
                continue
            row, col = loc
            # Look right!
            right = (row, col + 1)
            if right in self.keys \
               and self.keys[right].label == self.keys[loc].label:
                dl.append(right)
                self.keys[loc].width = 2
            # Look down!
            down = (row + 1, col)
            if down in self.keys \
               and self.keys[down].label == self.keys[loc].label:
                dl.append(down)
                self.keys[loc].height = 2
                if self.keys[loc].width == 2:
                    dl.append((row + 1, col + 1))
        for d in dl:
            del self.keys[d]

    def as_grid(self, callback):
        grid = Gtk.Grid()
        grid.set_column_homogeneous(True)
        grid.set_row_homogeneous(True)
        for loc, button in self.keys.items():
            row, col = loc
            grid.attach(button.as_button(callback), col, row,
                        button.width, button.height)
        return grid

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="quicktill debug keyboard")
    input = parser.add_mutually_exclusive_group(required=True)
    input.add_argument("--layoutfd", type=int, help="fd for keyboard layout")
    input.add_argument("--layoutfile", type=argparse.FileType('r'),
                       help="file containing keyboard layout")

    args = parser.parse_args()
    ustdin = os.fdopen(sys.stdin.fileno(), 'rb', buffering=0)

    if args.layoutfd:
        with os.fdopen(args.layoutfd, 'r') as f:
            kbd = KBDescription(json.load(f))
    else:
        kbd = KBDescription(json.load(args.layoutfile))

    def cb(code):
        print(code)
        sys.stdout.flush()

    win = KBWindow(kbd.as_grid(cb))
    win.set_default_size(1, 1) # Squish!
    win.connect("delete-event", Gtk.main_quit)
    win.show_all()
    GLib.io_add_watch(sys.stdin, GLib.IO_IN | GLib.IO_ERR | GLib.IO_HUP,
                      Gtk.main_quit)
    Gtk.main()
