quicktill - cash register software
==================================

Copying
-------

quicktill is Copyright (C) 2004-2013 Stephen Early <sde@individualpubs.co.uk>
It is distributed under the terms of the GNU General Public License
as published by the Free Software Foundation, either version 3
of the License, or (at your option) any later version.

Parts of this program were written by other people and are distributed
under different licences; see the individual source files for details:
 - quicktill/twitter.py - Apache License, version 2.0
 - quicktill/oauth2.py - MIT License

Getting started
---------------

quicktill is quite a complicated program to configure.  You should
start with an example configuration file, examples/pembury.py, and
edit it according to your needs.

You must create a postgresql database and make it accessible to
whichever user is running the till software.  Name this database in
the configuration file.

Put a URL pointing at the config file in /etc/quicktill/configurl
(eg. file:///home/till/configweb/pembury.py)

Create database tables:
> runtill syncdb

Get a draft database setup file and edit it:
> runtill dbsetup >database-config
> (edit database-config)
> runtill dbsetup database-config

Run in "stock control terminal" mode and enter your initial stock
(this mode doesn't require a special keyboard)
> runtill

Run in "cash register" mode, create stocklines, bind them to keys, put
your stock on sale, and sell it:
> runtill -c mainbar

Startup procedure
-----------------

 - runtill script calls quicktill.till.main()
 - main() reads /etc/quicktill/configurl if possible to find default config file location
 - main() parses command line options (overriding config file location if necessary)
 - main() reads config file and executes it as a python module "globalconfig", with
   globalconfig.configname set from the command line (or "default" if not supplied)
 - main() looks for globalconfig.configurations[configname] and bails if not found
 - main() sets up logging based on command line options
 - main() looks for keys in globalconfig.configurations[configname] and sets parameters
   throughout the library (mostly in tillconfig, but some in eg. printer)
 - main() runs the command that was specified on the command line (or "runtill" by default)

Assuming the command was "runtill":

 - quicktill.till.runtill() initialises the database engine
 - runtill() copies keyboard caps from the database to the keyboard driver
 - runtill() invokes quicktill.till.start() via the curses wrapper that catches exceptions
   and returns the display to a sane state on exit
 - start() invokes ui.init() with the root window, which sets up colours and the clock
 - start() goes through the pages defined in the config and calls ui.addpage() on each of them
 - start() calls ui.selectpage() on the first page
 - start() calls the firstpageinit() method of the first page
 - start() enters the main event loop

So we really just need to change things in start() and ui

New scheme:
  hotkeys just run functions
  first page should be specified explicitly in config file
  we need a function for "find a particular page and create it if it doesn't exist"
  nb that creating a page selects it implicitly


Old notes that shouldn't be here
--------------------------------

What configuration goes where?

Default printer: printer.driver (includes connection details)
Kickout procedure: printer.kickout
Defined pages: tillconfig.pages (includes hotkeys etc.)
Database connection string: td.database
Keyboard driver: ui.kb (includes keyboard layout)
Kitchen printer: foodorder.kitchenprinter
Menu URL: foodorder.menuurl

Pub name: tillconfig.pubname
Pub phone number: tillconfig.pubnumber
Pub address: tillconfig.pubaddr

VAT rate (to be obsoleted): tillconfig.vatrate
VAT number (to be obsoleted): tillconfig.vatno
Business address (to be obsoleted): tillconfig.companyaddr

Currency symbol: tillconfig.currency
Keyboard layout number: tillconfig.kbtype
Cashback limit: tillconfig.cashback_limit

Price policy function (optional): tillconfig.pricepolicy(sd,qty)
Quantity string function (optional): tillconfig.qtystring(qty,unitname)
Currency format function (optional): tillconfig.fc(amount)
Price guess function (optional): tillconfig.priceguess(dept,cost,abv)

Things that shouldn't be set in a global config module:
  how to connect to the local receipt printer / kickout
  ...er, that's about it!

Keyboard layouts and associated pages can be global because they may
be shared.

So what we really want is a "runner" script that fetches the global
config file (location defined in an /etc file), picks out a particular
configuration by keyboard layout number, and optionally takes
arguments to override the default printer type.  This could be till.py
with __name__=='__main__'...
